/**
 * @fileoverview Item hook handler definition.
 *
 * At a minimum, a hook handler must define a generate function that takes
 * a series of options and a callback function as parameters. The "generate"
 * function should return the HTML code generated by the add-on.
 *
 * Other functions that the add-on may define:
 * - enhance(el, options) to set event handlers
 * - actionCallback(options, callback) to let the template handle the
 * user action.
 *
 * Dependencies MUST start with './' not to require any kind of path
 * normalization when the code gets built.
 *
 * The handler MUST be wrapped in a factory function that takes the add-ons
 * options as parameter.
 */
define(['./dep'], function (dep) {
  /*
   * The module returns a factory method that creates the add-on
   * initialized with the given options
   *
   * @function
   * @param {Object} config Add-on configuration options, generated from
   *  the JSON Form object that the add-on may define in its manifest file
   */
  return function (config) {

    return {
      /**
       * Generates the add-on's HTML content.
       *
       * Generation may be asynchronous. The callback function receives the
       * error and the generated HTML content.
       *
       * @function
       * @param {Object} options Generation options. TBD.
       * @param {function} cb Callback function
       */
      generate: function (options, callback) {
        console.log('addon', 'debugpluginruntime', 'item', 'generate', options);
        return callback(null, '<p>Item hook of debug add-on</p>');
      },

      /**
       * Enhances the add-on's generated element with additional logic.
       *
       * @function
       * @param {Object|String} el The DOM Element or DOM element selector
       *   for the element that contains the generated HTML
       */
      enhance: function (el, options) {
        console.log('addon', 'debugpluginruntime', 'item', 'enhance', el, options);
      }
    };
  };
});